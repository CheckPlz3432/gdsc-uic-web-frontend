---
interface Props {
	variant: string;
	color: string;
    text: string;
    link: string;
}

const { variant, color, text, link} = Astro.props;
---

<astro-greet data-message={link}>
    <button class = {variant} > {text}</button>
</astro-greet>


<style define:vars={{ color }}>
    button {
        padding: 15px 30px;
        background-position: 100%;
        border-radius: 40px;
        font-size: 35px;
        text-align: center;
        font-weight: bold;
        border-color: var(--color);
        font-family: "Roboto";
        cursor: pointer;
    }
    .filled {
        color: white;
        background-color: var(--color);
    }
    .outlined {
        border-width: thick;
        color: var(--color);
        background-color: white;
    }
    .disabled {
        border-width: thick;
        color: var(--color);
        background-color: white;
        pointer-events: none;
        opacity: 0.3;
    }

</style>

<script>
    class AstroGreet extends HTMLElement {
    constructor() {
      super();

      const link = this.dataset.message || '';
      const button = this.querySelector('button');
      if(button != null) {
        button.addEventListener('click', () => {
        window.location.href = link;
      });
      }
    }
    }
    customElements.define('astro-greet', AstroGreet);
</script>
